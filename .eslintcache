[{"E:\\Youtube MERN\\amazon-clone\\src\\index.js":"1","E:\\Youtube MERN\\amazon-clone\\src\\App.js":"2","E:\\Youtube MERN\\amazon-clone\\src\\reportWebVitals.js":"3","E:\\Youtube MERN\\amazon-clone\\src\\Components\\Header\\Header.js":"4","E:\\Youtube MERN\\amazon-clone\\src\\Components\\Home\\Home.js":"5","E:\\Youtube MERN\\amazon-clone\\src\\Components\\Banner\\Banner.js":"6","E:\\Youtube MERN\\amazon-clone\\src\\Components\\Product\\Product.js":"7","E:\\Youtube MERN\\amazon-clone\\src\\Containers\\Checkout\\Checkout.js":"8","E:\\Youtube MERN\\amazon-clone\\src\\Containers\\Subtotal\\Subtotal.js":"9","E:\\Youtube MERN\\amazon-clone\\src\\Containers\\Payment\\Payment.js":"10","E:\\Youtube MERN\\amazon-clone\\src\\StateProvider.js":"11","E:\\Youtube MERN\\amazon-clone\\src\\reducer.js":"12","E:\\Youtube MERN\\amazon-clone\\src\\Components\\Login\\Login.js":"13","E:\\Youtube MERN\\amazon-clone\\src\\Components\\CheckoutProduct\\CheckoutProduct.js":"14","E:\\Youtube MERN\\amazon-clone\\src\\constants.js":"15","E:\\Youtube MERN\\amazon-clone\\src\\firebase.js":"16","E:\\Youtube MERN\\amazon-clone\\src\\axios.js":"17","E:\\Youtube MERN\\amazon-clone\\src\\Containers\\Orders\\Orders.js":"18","E:\\Youtube MERN\\amazon-clone\\src\\Components\\OrderElement\\OrderElement.js":"19","E:\\Youtube MERN\\amazon-clone\\src\\Components\\ProductPrice\\ProductPrice.js":"20"},{"size":688,"mtime":1608134413346,"results":"21","hashOfConfig":"22"},{"size":2645,"mtime":1609359660478,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":3002,"mtime":1609700168836,"results":"25","hashOfConfig":"22"},{"size":2027,"mtime":1609700868508,"results":"26","hashOfConfig":"22"},{"size":1990,"mtime":1610451882915,"results":"27","hashOfConfig":"22"},{"size":1526,"mtime":1610450187380,"results":"28","hashOfConfig":"22"},{"size":1722,"mtime":1608574019341,"results":"29","hashOfConfig":"22"},{"size":2941,"mtime":1610449866708,"results":"30","hashOfConfig":"22"},{"size":7365,"mtime":1610450438624,"results":"31","hashOfConfig":"22"},{"size":879,"mtime":1608490437378,"results":"32","hashOfConfig":"22"},{"size":1687,"mtime":1608462872252,"results":"33","hashOfConfig":"22"},{"size":5862,"mtime":1608461341765,"results":"34","hashOfConfig":"22"},{"size":1236,"mtime":1610450016423,"results":"35","hashOfConfig":"22"},{"size":325,"mtime":1609362466875,"results":"36","hashOfConfig":"22"},{"size":527,"mtime":1608205723726,"results":"37","hashOfConfig":"22"},{"size":280,"mtime":1609268090533,"results":"38","hashOfConfig":"22"},{"size":2287,"mtime":1609348394620,"results":"39","hashOfConfig":"22"},{"size":4884,"mtime":1610450537188,"results":"40","hashOfConfig":"22"},{"size":632,"mtime":1610450894444,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1kl7jor",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"E:\\Youtube MERN\\amazon-clone\\src\\index.js",[],["93","94"],"E:\\Youtube MERN\\amazon-clone\\src\\App.js",["95"],"import './App.css';\nimport Header from './Components/Header/Header';\nimport Home from './Components/Home/Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Checkout from './Containers/Checkout/Checkout';\nimport Payment from './Containers/Payment/Payment';\nimport Login from './Components/Login/Login';\nimport { useEffect } from 'react';\nimport { authetication } from './firebase';\nimport { useStateValue } from './StateProvider';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements } from '@stripe/react-stripe-js';\nimport Orders from './Containers/Orders/Orders';\n\nconst stripePublicKey = \"pk_test_51HzjrRLqYQpz7YYBTgt7qzcv3dY02vkHAk9RqVDiI2L9b366IX7bINvY3E9hFPmUONnD8fPpoabULkgJbyDLamjy00WWOgjzpT\";\nconst promise = loadStripe(stripePublicKey);\n\nfunction App() {\n\n  const [{ user }, dispatch] = useStateValue();\n\n  // it is going to store the email of the user in our current state\n  // which can be used throughout the App\n  useEffect(() => {\n    // it will only run once when App component loads!\n    // onAuthStateChanged will make sure that if there is any change in the authenication, useEffect is fired again\n    authetication.onAuthStateChanged(authUser => {\n      console.log('Username: ' + authUser);\n      if (authUser) {\n        // user just logged in / user was already logged in\n        // call the reducer function in reducer.js\n        dispatch({\n          type: 'SET_USER',\n          user: authUser\n        });\n      } else {\n        // user is logged out\n        dispatch({\n          type: 'SET_USER',\n          user: null,\n        })\n      }\n    });\n\n    // whatever we write in the array below, if that thing changes, useEffect will be fired again\n  }, []);\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n\n          <Route path='/orders'>\n            <Elements stripe={promise}>\n              <Header />\n              <Orders />\n            </Elements>\n          </Route>\n\n          <Route path='/login'>\n            <Header />\n            <Login userLoggedIn={user != null ? true : false} />\n          </Route>\n\n          <Route path='/checkout'>\n            <Header />\n            <Checkout />\n          </Route>\n\n          <Route path='/payment'>\n            <Header />\n            {/* Elements come from react-stripe-js and it is just to provide payment functionality */}\n            <Elements stripe={promise}>\n              <Payment />\n            </Elements>\n          </Route>\n\n          <Route path='/'>\n            <Header />\n            <Home />\n          </Route>\n        </Switch>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","E:\\Youtube MERN\\amazon-clone\\src\\reportWebVitals.js",[],"E:\\Youtube MERN\\amazon-clone\\src\\Components\\Header\\Header.js",["96","97"],"import React, { useEffect } from 'react';\r\nimport classes from './Header.module.css';\r\nimport amazonIcon from '../../Images/amazon-icon.png';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport { authetication } from '../../firebase';\r\n\r\nfunction Header() {\r\n    const [{ user, basket }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    let loginOrLogutPage = '/login';        // loginOrLogutPage tells where to move if sign out \r\n    let username = null;\r\n\r\n    // if user is already logged in\r\n    if (user && user.email) {\r\n        username = user.email;\r\n        // remove everything after @\r\n        username = username.substring(0, username.indexOf(\"@\"));\r\n\r\n        // convert first character to uppercase\r\n        const initial = username[0].toUpperCase();\r\n\r\n        // get a substring starting at index 1\r\n        username = initial + username.substring(1);\r\n        loginOrLogutPage = '/';\r\n    }\r\n\r\n    console.log('Username: ', username);\r\n\r\n    const handleLoginLogout = () => {\r\n        authetication.signOut();        // logout user\r\n    }\r\n\r\n    const moveToOrders = () => {\r\n        history.push('/orders');\r\n    }\r\n\r\n    return (\r\n        <div className={classes.header}>\r\n            <Link to='/'>\r\n                <img className={classes.logo} src={amazonIcon} alt='Amazon logo' />\r\n            </Link>\r\n            <div className={classes.search}>\r\n                <input className={classes.inputField} type='text' />\r\n                <SearchIcon className={classes.SearchIcon} />\r\n            </div>\r\n\r\n            <div className={classes.navigation}>\r\n                <Link to={loginOrLogutPage}>\r\n                    <div onClick={handleLoginLogout} className={classes.option}>\r\n                        <span className={classes.lineOne}>Hello {username ? username : \"Guest\"}</span>\r\n                        <span className={classes.lineTwo}>{username ? 'Sign Out' : 'Sign In'}</span>\r\n                    </div>\r\n                </Link>\r\n\r\n                <div className={classes.option}>\r\n                    <span className={classes.lineOne}>Returns</span>\r\n                    <span className={classes.lineTwo} style={{cursor: 'pointer'}} onClick={moveToOrders}>&Orders</span>\r\n                </div>\r\n\r\n                <div className={classes.option}>\r\n                    <span className={classes.lineOne}>Your</span>\r\n                    <span className={classes.lineTwo}>Prime</span>\r\n                </div>\r\n\r\n                <Link to='/checkout' className={classes.Basket}>\r\n                    <div>\r\n                        <ShoppingBasketIcon />\r\n                        <span className={classes.basketCount}>{basket.length}</span>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","E:\\Youtube MERN\\amazon-clone\\src\\Components\\Home\\Home.js",[],"E:\\Youtube MERN\\amazon-clone\\src\\Components\\Banner\\Banner.js",[],"E:\\Youtube MERN\\amazon-clone\\src\\Components\\Product\\Product.js",["98","99"],"import React from 'react';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport classes from './Product.module.css';\r\nimport { motion } from \"framer-motion\";\r\nimport ProductPrice from '../ProductPrice/ProductPrice';\r\n\r\nfunction Product({ id, title, imageURL, price, rating }) {\r\n\r\n    const [{ basket }, dispatch] = useStateValue();\r\n\r\n    //console.log('Basket contains >>> ', basket);\r\n\r\n    const addToBasket = () => {\r\n        // dispatch the item into data layer\r\n        dispatch({\r\n            type: 'ADD_TO_BASKET',\r\n            item: {\r\n                id: id,\r\n                title: title,\r\n                price: price,\r\n                rating: rating,\r\n                image: imageURL,\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <motion.div className={classes.Product} whileHover={{scale: 1.03, boxShadow:'10px 10px 24px 5px gray'}}>\r\n\r\n            <div className={classes.Info}>\r\n                {title}\r\n                <div className={classes.Price}>\r\n                    <ProductPrice price={price}/>\r\n                </div>\r\n                <div className={classes.Rating}>\r\n                    {\"⭐\".repeat(rating)}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.ImageThumbnail}>\r\n                <img src={imageURL} alt='Product Image' className={classes.Image} />\r\n            </div>\r\n\r\n            <button className={classes.Button} onClick={addToBasket}>Add to basket</button>\r\n        </motion.div>\r\n\r\n    )\r\n}\r\n\r\nexport default Product;","E:\\Youtube MERN\\amazon-clone\\src\\Containers\\Checkout\\Checkout.js",["100"],"import React from 'react';\r\nimport CheckoutProduct from '../../Components/CheckoutProduct/CheckoutProduct';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport Subtotal from '../Subtotal/Subtotal';\r\nimport classes from './Checkout.module.css';\r\n\r\nfunction Checkout() {\r\n\r\n    const [{ user, basket }, dispatch] = useStateValue();\r\n    const hash = require('object-hash');\r\n\r\n    let username = null;\r\n\r\n    if (user && user.email) {\r\n        username = user.email;\r\n\r\n        // remove everything from @\r\n        // username = username.substring(0, username.indexOf(\"@\"));\r\n\r\n        // username = username[0].toUpperCase() + username.substring(1);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Checkout}>\r\n            <div className={classes.OrderItems}>\r\n                <h5 className={classes.Username}>Hello, {username ? username : \" Guest\"}</h5>\r\n                <h2 className={classes.Title}>\r\n                    Your shopping basket\r\n                </h2>\r\n                {\r\n                    basket.map(item => {\r\n                        return (\r\n                        <CheckoutProduct\r\n                            key={hash(item.id + Math.random())}\r\n                            id={item.id}\r\n                            image={item.image}\r\n                            title={item.title}\r\n                            price={item.price}\r\n                            rating={item.rating}\r\n                            hideButton={false} />)\r\n                    }\r\n\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.PaymentDetails}>\r\n                <Subtotal />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Checkout;\r\n","E:\\Youtube MERN\\amazon-clone\\src\\Containers\\Subtotal\\Subtotal.js",["101","102"],"import React, { useEffect, useState } from 'react';\r\nimport classes from './Subtotal.module.css';\r\nimport CurrencyFormat from 'react-currency-format';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport { getBasketTotal } from '../../reducer';\r\nimport { useHistory } from 'react-router';\r\n\r\nfunction Subtotal() {\r\n    let checkboxStatus = false;\r\n    const history = useHistory();\r\n    const [{ user, basket }, dispatch] = useStateValue();\r\n    const [isBasketTotalZero, setBasketTotalZero] = useState(true);\r\n    \r\n    const handleButtonClick = () => {\r\n        // check if user is logged in, if not, move to login page\r\n        if (user == null) {\r\n            history.push('/login');\r\n        } else {\r\n            history.push('/payment');\r\n        }\r\n    }\r\n\r\n    const enableCheckoutButton = (\r\n        <button className={classes.CheckoutButton} onClick={handleButtonClick}>\r\n            Proceed to checkout\r\n        </button>\r\n    );\r\n\r\n    const disableCheckoutButton = (\r\n        <button className={classes.DisableCheckoutButton} disabled>\r\n            Proceed to checkout\r\n        </button>\r\n    );\r\n\r\n    const checkboxClicked = () => {\r\n        checkboxStatus = !checkboxStatus;\r\n        console.log('Checked: ', checkboxStatus);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let basketTotal = getBasketTotal(basket);\r\n        console.log(\"Basket total: \", basketTotal);\r\n\r\n        if (basketTotal != 0) {\r\n            setBasketTotalZero(false);\r\n            document.getElementById('giftCheckbox').disabled = false;\r\n        } else {\r\n            setBasketTotalZero(true);\r\n            document.getElementById('giftCheckbox').disabled = true;\r\n        }\r\n\r\n        //  basket in these [] state that whenever there is some change in the basket, useEffect will be executed again\r\n    }, [basket]);\r\n\r\n\r\n    return (\r\n        <div className={classes.Subtotal}>\r\n            <CurrencyFormat renderText={(value) => {\r\n                return (\r\n                    <>\r\n                        <p className={classes.Message}>\r\n                            Subtotal({basket.length} items): <strong>{'\\u20B9'}{value}</strong>\r\n                        </p>\r\n                        <small className={classes.Gift}>\r\n                            <input type='checkbox' id='giftCheckbox'\r\n                                className={classes.Checkbox}\r\n                                onClick={checkboxClicked}\r\n                                disabled={true} />This order contains a gift\r\n                        </small>\r\n                    </>\r\n                )\r\n            }}\r\n                decimalScale={2}\r\n                value={getBasketTotal(basket)}\r\n                displayType={'text'}\r\n                thousandSeparator={true}\r\n                thousandSpacing={'2s'}\r\n            />\r\n\r\n            {isBasketTotalZero ? disableCheckoutButton : enableCheckoutButton}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Subtotal\r\n","E:\\Youtube MERN\\amazon-clone\\src\\Containers\\Payment\\Payment.js",["103","104"],"import React, { useEffect, useState } from 'react';\r\nimport classes from './Payment.module.css';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport CheckoutProduct from '../../Components/CheckoutProduct/CheckoutProduct';\r\nimport { useElements, useStripe, CardElement } from '@stripe/react-stripe-js';\r\nimport { getBasketTotal } from '../../reducer';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from '../../axios';\r\nimport { database } from '../../firebase';\r\nimport ProductPrice from '../../Components/ProductPrice/ProductPrice';\r\n\r\nfunction Payment() {\r\n\r\n    const [{ basket, user }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n\r\n    // bootstrap spinner\r\n    const spinner = (\r\n        <div className=\"spinner-border text-light spinner-border-sm\" role=\"status\">\r\n            <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n    );\r\n\r\n    // used for payment functionality\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const [error, setError] = useState(null);\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [succedded, setSuccedded] = useState(false);\r\n    const [processing, setProcessing] = useState(\"\");\r\n    const [clientSecret, setClientSecret] = useState(\"\");       // it is required to get payment from the client\r\n\r\n    useEffect(() => {\r\n        // generate special stripe secret which allow us to charge the customer\r\n\r\n        const getClientSecret = async () => {\r\n            const response = await axios({\r\n                method: 'POST',\r\n                // Stripe excepts the total in a currencies subunits,i.e., it should be sent in paise instead of rupees\r\n                // be it any curreny, it must be converted to its lowest form\r\n                url: `/payments/create?total=${getBasketTotal(basket) * 100}&email=${user ? user.email : \"Guest\"}`,\r\n\r\n            });\r\n            setClientSecret(response.data.clientSecret);\r\n        }\r\n\r\n        getClientSecret();\r\n        // here basket defines that, whenever the basket will change, we will require a new client secret to accept the payment\r\n    }, [basket]);\r\n\r\n    console.log(`Clinet secret: ${clientSecret}`);\r\n\r\n    const handleSubmit = async (event) => {\r\n        // all the stripe stuff\r\n        event.preventDefault();\r\n        setProcessing(true);\r\n\r\n        const cardNumber = elements.getElement(CardElement);     // CardElement is written below and it displays the Card Number input area\r\n        \r\n        const payload = await stripe.confirmCardPayment(clientSecret, {\r\n            payment_method: {\r\n                card: cardNumber,\r\n            }\r\n        }).then(({ paymentIntent }) => {\r\n            // paymentIntent is payment confirmation\r\n            console.log(paymentIntent);\r\n            \r\n            // store order info to firebase database\r\n            const collectionName = 'users';\r\n            // every user can have multiple orders, so orders is a collection\r\n            // paymentIntent.id is treated as order id\r\n            \r\n            database.collection(collectionName)\r\n            .doc(user?.uid)             // this uid is got from user and it is set in App.js when user is successfully logged in. uid is supplied by Firebase on successfull login.\r\n            .collection('orders')\r\n            .doc(paymentIntent.id).set({\r\n                basket: basket,\r\n                amount: paymentIntent.amount,\r\n                created: paymentIntent.created          // time of creation\r\n            });\r\n            \r\n            setSuccedded(true);\r\n            setError(null);\r\n            setProcessing(false);\r\n            \r\n            // empty basket\r\n            dispatch({\r\n                type: 'EMPTY_BASKET',\r\n            });\r\n\r\n            // replace is used because we dont want user to click back button and come back to payment page again after successful\r\n            // payment\r\n            history.replace('/orders');\r\n        }).catch(err => {\r\n            \r\n            history.push('/error');\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        // listen to the card number that the user is entering\r\n        // and display any error if they occur\r\n        if (event.error)\r\n            console.log(event.error.message);\r\n\r\n        setDisabled(event.empty);\r\n        setError(event.error ? event.error.message : null);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Payment}>\r\n            <h3 className={classes.Heading}>\r\n                Checkout ({basket ? basket.length : \"0\"} items)\r\n            </h3>\r\n\r\n            <div className={classes.Section}>\r\n                <div className={classes.Title}>\r\n                    <h6>Delivery Address</h6>\r\n                </div>\r\n                <div className={classes.Address}>\r\n                    <p className={classes.PersonInfo}>{user && user.email ? user.email : \"Guest\"}</p>\r\n                    <p className={classes.PersonInfo}>123, React Lane</p>\r\n                    <p className={classes.PersonInfo}>Facebook city</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.Section}>\r\n                <div className={classes.ReviewTitle}>\r\n                    <h6>Review Items</h6>\r\n                </div>\r\n                <div className={classes.ReviewItems}>\r\n                    {basket.map(item => {\r\n                        return (\r\n                            <CheckoutProduct\r\n                                id={item.id}\r\n                                image={item.image}\r\n                                title={item.title}\r\n                                price={item.price}\r\n                                rating={item.rating}\r\n                                style={{ marginLeft: '0' }}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.Section}>\r\n                <div className={classes.Title}>\r\n                    <h6>Payment Method</h6>\r\n                </div>\r\n\r\n                <div className={classes.PaymentDetails}>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <CardElement onChange={handleChange} />\r\n                        <strong className={classes.CardMessage}>Do not enter real card details!(try 4242424.... in card number, 04/24 expiry, 242 as CVV, 42424 as ZIP)</strong>\r\n                        <br/>\r\n                        <strong className={classes.Price}>\r\n                            Total Price: <ProductPrice price={getBasketTotal(basket)} />\r\n                        </strong>\r\n                        <br />\r\n                        <div className={classes.ButtonDiv}>\r\n                            <button\r\n                                disabled={processing || disabled || succedded}\r\n                                className={!disabled ? classes.PayButton : classes.DisableButton}>\r\n                                {processing ? spinner : \"Pay now\"}\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                    <div>\r\n                        {error != null ? console.log(error.message) : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Payment\r\n","E:\\Youtube MERN\\amazon-clone\\src\\StateProvider.js",[],"E:\\Youtube MERN\\amazon-clone\\src\\reducer.js",[],"E:\\Youtube MERN\\amazon-clone\\src\\Components\\Login\\Login.js",["105","106","107"],"import React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { constants } from '../../constants';\r\nimport { authetication } from '../../firebase';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport classes from './Login.module.css';\r\n\r\nfunction Login() {\r\n\r\n    const [{ user }] = useStateValue();\r\n    const history = useHistory();\r\n    const loginErrorMessage = (<p className={classes.ErrorMessage}>Invalid username/password</p>);\r\n    const registerErrorMessage = (<p className={classes.ErrorMessage}>Email id already in use!</p>);\r\n    const invalidEmailErrorMessage = (<p className={classes.ErrorMessage}>Invalid email id!</p>);\r\n    const userNotLoginError = (<p className={classes.ErrorMessage}>You need to Login before placing/viewing order!</p>);\r\n\r\n    // bootstrap spinner\r\n    const loginSpinner = (\r\n        <div className=\"spinner-border text-light spinner-border-sm\" role=\"status\">\r\n            <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n    );\r\n\r\n    const registerSpinner = (\r\n        <div className=\"spinner-border text-warning spinner-border-sm\" role=\"status\">\r\n            <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n    );\r\n\r\n\r\n    // state in Functional components\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [showLoginSpinner, setShowLoginSpinner] = useState(false);\r\n    const [showRegisterSpinner, setShowRegisterSpinner] = useState(false);\r\n\r\n    const [isValidUser, setValidUser] = useState(true);\r\n    const [isNewUser, setNewUser] = useState(true);\r\n    const [isValidEmailForRegistration, setValidEmailForRegistration] = useState(true);\r\n    const [loginError, setLoginError] = useState(user);\r\n\r\n    const signIn = (event) => {\r\n        setNewUser(true);       // hide register error message if visible\r\n        setValidEmailForRegistration(true);     // hide invalid email error message if visible\r\n        setShowLoginSpinner(true);\r\n        setLoginError(false);\r\n\r\n        // by default, page will refresh because this function is linked to a button inside a form\r\n        event.preventDefault();     // prevents the page to refresh\r\n        //console.log(`Email: ${email}, Password: ${password}`);\r\n\r\n        //authetication will happen here!\r\n        const promise = authetication.signInWithEmailAndPassword(email, password);\r\n        promise.then(resp => {\r\n            history.push('/');\r\n        }).catch(err => {\r\n            setValidUser(false);\r\n            setShowLoginSpinner(false);\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const register = () => {\r\n        setValidUser(true);\r\n        setShowRegisterSpinner(true);\r\n        setLoginError(false);\r\n\r\n        // move to registration page\r\n        const promise = authetication.createUserWithEmailAndPassword(email, password);\r\n        promise.then(response => {\r\n            console.log(response);\r\n            if (response) {\r\n                history.push('/');\r\n            }\r\n        }).catch(err => {\r\n            if (err.message.includes(\"badly formatted\")) {\r\n                // invalid email\r\n                console.log(\"Invalid emaild\");\r\n                setValidEmailForRegistration(false);\r\n            }\r\n\r\n            if (err.message.includes(\"another account\")) {\r\n                // email id already in use\r\n                console.log(\"Duplicate email\");\r\n                setValidEmailForRegistration(false);\r\n                setNewUser(false);\r\n            }\r\n\r\n            setShowRegisterSpinner(false);\r\n            console.log(err.message);\r\n        })\r\n\r\n    }\r\n\r\n    const hideErrorMessage = () => {\r\n        setValidUser(true);\r\n        setNewUser(true);\r\n        setValidEmailForRegistration(true);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Login}>\r\n            <Link to='/'>\r\n                <img src={constants.amazonLogoURL} className={classes.Logo} alt=\"Amazon logo\" />\r\n            </Link>\r\n            <div className={classes.LoginContainer}>\r\n                <h1>Sign In</h1>\r\n                <form>\r\n                    <h5>Email</h5>\r\n                    <input type='text'\r\n                        placeholder='Enter email'\r\n                        value={email} // connects this input field with state\r\n                        onFocus={hideErrorMessage}        // hide error message\r\n                        onChange={(event) => { setEmail(event.target.value) }} />\r\n\r\n                    <h5>Password</h5>\r\n                    <input type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onFocus={hideErrorMessage}        // hide error message\r\n                        onChange={(event) => { setPassword(event.target.value) }} />\r\n                    <br />\r\n\r\n                    <button\r\n                        className={classes.SignIn}\r\n                        onClick={signIn}\r\n                        disabled={showLoginSpinner}>\r\n                        {showLoginSpinner ? loginSpinner : \"Sign In\"}\r\n                    </button>\r\n\r\n                    {isValidUser == false ? loginErrorMessage : null}\r\n                    <br />\r\n                </form>\r\n            </div>\r\n            <p className={classes.NewUser}>New to Amazon ?</p>\r\n\r\n            <button id='registerButton'\r\n                className={classes.Register}\r\n                onClick={register}\r\n                disabled={showRegisterSpinner}\r\n            >{showRegisterSpinner ? registerSpinner : \"Create your amazon account\"}</button>\r\n\r\n            {isNewUser == false ? registerErrorMessage : isValidEmailForRegistration == false ? invalidEmailErrorMessage : null}\r\n            {!loginError ? userNotLoginError : null}\r\n            <br />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","E:\\Youtube MERN\\amazon-clone\\src\\Components\\CheckoutProduct\\CheckoutProduct.js",["108","109","110"],"import React from 'react';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport ProductPrice from '../ProductPrice/ProductPrice';\r\nimport classes from './CheckoutProduct.module.css';\r\n\r\nfunction CheckoutProduct({ id, image, title, price, rating, hideButton }) {\r\n\r\n    const [{ basket }, dispatch] = useStateValue();\r\n\r\n    const removeFromBasket = () => {\r\n        // remove the item from the basket\r\n        dispatch({\r\n            type: 'REMOVE_FROM_BASKET',\r\n            id: id,\r\n        });\r\n    }\r\n\r\n    const checkoutButton = (<button className={classes.RemoveButton} onClick={removeFromBasket}>Remove Item</button>);\r\n\r\n    return (\r\n\r\n        <div className={classes.CheckoutProduct}>\r\n            <div className={classes.ImageColumn}>\r\n                <img src={image} className={classes.Image} />\r\n            </div>\r\n            <div className={classes.Information}>\r\n                <strong style={{ fontSize: '1.2vw' }}>{title}</strong>\r\n                <ProductPrice price={price} />\r\n                <span style={{ fontSize: '1.2vw' }}>{\"⭐\".repeat(rating)}</span>\r\n                {hideButton == false ? checkoutButton : \"\"}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CheckoutProduct;\r\n","E:\\Youtube MERN\\amazon-clone\\src\\constants.js",[],"E:\\Youtube MERN\\amazon-clone\\src\\firebase.js",[],"E:\\Youtube MERN\\amazon-clone\\src\\axios.js",[],"E:\\Youtube MERN\\amazon-clone\\src\\Containers\\Orders\\Orders.js",["111","112","113","114","115","116","117"],"import React, { useState, useEffect } from 'react';\r\nimport Login from '../../Components/Login/Login';\r\nimport OrderElement from '../../Components/OrderElement/OrderElement';\r\nimport { database } from '../../firebase';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport classes from './Orders.module.css';\r\n\r\nfunction Orders() {\r\n\r\n    const [{ basket, user }, disaptch] = useStateValue();\r\n    const [orders, setOrders] = useState([]);\r\n    const [data, setData] = useState(false);\r\n\r\n    let userLoggedIn = false;\r\n\r\n    const spinnerStyle = {\r\n        width: \"10rem\",\r\n        height: \"10rem\"\r\n    };\r\n\r\n    const spinner = (\r\n        <div className=\"d-flex justify-content-center\" >\r\n            <div className=\"spinner-border\" role=\"status\" style={spinnerStyle}>\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            userLoggedIn = true;\r\n            database\r\n                .collection('users')\r\n                .doc(user?.uid)\r\n                .collection('orders')\r\n                .orderBy('created', 'desc')\r\n                .onSnapshot(snapshot => {\r\n                    setOrders(snapshot.docs.map(doc => {\r\n                        return {\r\n                            id: doc.id,     // this id is auto-generated at time of payment = paymentIntent.id(generated by Stripe)\r\n                            data: doc.data()   // will return ( basket, amount, createdTime )   -> stored at the time of successfull payment\r\n                        }\r\n                    }))\r\n                });\r\n            { setData(true) }\r\n        } else {\r\n            setOrders([]);\r\n        }\r\n\r\n    }, [user] //these braces makes sure that useEffect will only run when there is some change in \"user\" which is setup at Login time in App.js\r\n    );\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={classes.Heading}>Orders</h2>\r\n            {user == null ? null : data == false ? spinner : null}\r\n            <div className={classes.Order}>\r\n                {orders?.map(order => {\r\n                    return <OrderElement key={order.id} orderDetails={order} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Orders\r\n","E:\\Youtube MERN\\amazon-clone\\src\\Components\\OrderElement\\OrderElement.js",["118","119","120"],"import React, { useEffect, useState } from 'react';\r\nimport classes from './OrderElement.module.css';\r\nimport moment from \"moment\";        // used for timestamps\r\nimport CheckoutProduct from '../CheckoutProduct/CheckoutProduct';\r\nimport hash from 'object-hash';\r\nimport axios from '../../axios';\r\nimport { useStateValue } from '../../StateProvider';\r\nimport { database } from '../../firebase';\r\nimport ProductPrice from '../ProductPrice/ProductPrice';\r\n\r\nfunction OrderElement({ orderDetails }) {\r\n\r\n    const [{ user }] = useStateValue();\r\n\r\n    const orderCancelDuration = 15;          // days\r\n\r\n    const displayOrderTime = moment.unix(orderDetails.data.created).format(\"MMMM Do YYYY, h:mma\");\r\n    const orderTime = moment.unix(orderDetails.data.created).format(\"D/MM/YYYY, H:m:s\");\r\n    const today = new Date();\r\n\r\n    const currentDate = today.getDate() + \"/\" + (today.getMonth() + 1) + \"/\" + today.getFullYear();\r\n    const currentTime = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n\r\n    // returns whether to display cancel order button or not\r\n    // return policy : 15 days\r\n    const calculateDaysDifference = (orderTimeStamp, currentDate, currentTime) => {\r\n        const [orderDate, orderTime] = orderTimeStamp.split(',');\r\n        //console.log(orderDate + \" ---\" + orderTime );\r\n\r\n        const [orderDay, orderMonth, orderYear] = orderDate.split('/');\r\n        const [orderHour, orderMinute, orderSec] = orderTime.split(':');\r\n\r\n        // -1 because month range is from 0 to 11, not 1 to 12\r\n        const orderMoment = moment([parseInt(orderYear), parseInt(orderMonth - 1), parseInt(orderDay), parseInt(orderHour), parseInt(orderMinute), parseInt(orderSec)]);\r\n        // console.log(orderMoment);\r\n        const [currentDay, currentMonth, currentYear] = currentDate.split('/');\r\n        const [currentHour, currentMinute, currentSec] = orderTime.split(':');\r\n\r\n        const currentMoment = moment([parseInt(currentYear), parseInt(currentMonth - 1), parseInt(currentDay), parseInt(currentHour), parseInt(currentMinute), parseInt(currentSec)]);\r\n       // console.log(currentMoment);\r\n\r\n        return currentMoment.diff(orderMoment, 'days');\r\n    }\r\n\r\n    const cancelMyOrder = async () => {\r\n        console.log('Order cancel clicked!');\r\n        // delete record in firebase\r\n        // store order info to firebase database\r\n        const collectionName = 'users';\r\n        // every user can have multiple orders, so orders is a collection\r\n        // paymentIntent.id is treated as order id\r\n\r\n        database.collection(collectionName)\r\n            .doc(user?.uid)             // this uid is got from user and it is set in App.js when user is successfully logged in. uid is supplied by Firebase on successfull login.\r\n            .collection('orders')\r\n            .doc(orderDetails.id).delete();\r\n\r\n        const response = await axios({\r\n            method: 'POST',\r\n            url: `/cancelorder?paymentIntent=` + orderDetails.id,\r\n        });\r\n\r\n    }\r\n\r\n    const cancelOrderButton = (\r\n        <button onClick={cancelMyOrder} className={classes.CancelButton}>\r\n            Cancel order\r\n        </button>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.OrderElement}>\r\n            <h2>Order</h2>\r\n            {/* data is the name of key that contains the data fetched from Firebase */}\r\n            <p>{displayOrderTime}</p>\r\n\r\n            <p>\r\n                <small className={classes.Id}><strong>Order Id:</strong> {orderDetails.id}</small>\r\n            </p>\r\n            {/* One Order can have multiple items, so we need to loop through every item\r\n                Basket is saved to the database at time of successfull payment! */}\r\n            {orderDetails.data.basket?.map(item => {\r\n               // console.log(\"Days difference: \" + calculateDaysDifference(orderTime, currentDate, currentTime));\r\n                return (\r\n                    <CheckoutProduct\r\n                        key={hash(item.id + Math.random())}\r\n                        id={item.id}\r\n                        title={item.title}\r\n                        image={item.image}\r\n                        price={item.price}\r\n                        rating={item.rating}\r\n                        hideButton={true}\r\n                    />\r\n                );\r\n            })}\r\n\r\n            <div className={classes.CancelButtonAndOrderTotal}>\r\n                {calculateDaysDifference(orderTime, currentDate, currentTime) < orderCancelDuration ? cancelOrderButton : <span className={classes.Empty}></span>}\r\n                {/* / 100 because while creating a payment request amount is specified in paise(smallest subunit of INR). */}\r\n                <p className={classes.OrderTotal}>Order total: <ProductPrice price={orderDetails.data.amount / 100} /></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderElement\r\n","E:\\Youtube MERN\\amazon-clone\\src\\Components\\ProductPrice\\ProductPrice.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":46,"column":6,"nodeType":"127","endLine":46,"endColumn":8,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":26},{"ruleId":"129","severity":1,"message":"133","line":11,"column":30,"nodeType":"131","messageId":"132","endLine":11,"endColumn":38},{"ruleId":"129","severity":1,"message":"134","line":9,"column":14,"nodeType":"131","messageId":"132","endLine":9,"endColumn":20},{"ruleId":"135","severity":1,"message":"136","line":42,"column":17,"nodeType":"137","endLine":42,"endColumn":85},{"ruleId":"129","severity":1,"message":"133","line":9,"column":30,"nodeType":"131","messageId":"132","endLine":9,"endColumn":38},{"ruleId":"129","severity":1,"message":"133","line":11,"column":30,"nodeType":"131","messageId":"132","endLine":11,"endColumn":38},{"ruleId":"138","severity":1,"message":"139","line":44,"column":25,"nodeType":"140","messageId":"141","endLine":44,"endColumn":27},{"ruleId":"125","severity":1,"message":"142","line":50,"column":8,"nodeType":"127","endLine":50,"endColumn":16,"suggestions":"143"},{"ruleId":"129","severity":1,"message":"144","line":61,"column":15,"nodeType":"131","messageId":"132","endLine":61,"endColumn":22},{"ruleId":"138","severity":1,"message":"145","line":131,"column":34,"nodeType":"140","messageId":"141","endLine":131,"endColumn":36},{"ruleId":"138","severity":1,"message":"145","line":143,"column":24,"nodeType":"140","messageId":"141","endLine":143,"endColumn":26},{"ruleId":"138","severity":1,"message":"145","line":143,"column":86,"nodeType":"140","messageId":"141","endLine":143,"endColumn":88},{"ruleId":"129","severity":1,"message":"134","line":8,"column":14,"nodeType":"131","messageId":"132","endLine":8,"endColumn":20},{"ruleId":"146","severity":1,"message":"147","line":24,"column":17,"nodeType":"137","endLine":24,"endColumn":62},{"ruleId":"138","severity":1,"message":"145","line":30,"column":29,"nodeType":"140","messageId":"141","endLine":30,"endColumn":31},{"ruleId":"129","severity":1,"message":"148","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":13},{"ruleId":"129","severity":1,"message":"134","line":10,"column":14,"nodeType":"131","messageId":"132","endLine":10,"endColumn":20},{"ruleId":"129","severity":1,"message":"149","line":10,"column":30,"nodeType":"131","messageId":"132","endLine":10,"endColumn":38},{"ruleId":"129","severity":1,"message":"150","line":32,"column":13,"nodeType":"131","messageId":"132","endLine":32,"endColumn":25},{"ruleId":"125","severity":1,"message":"151","line":32,"column":28,"nodeType":"152","endLine":32,"endColumn":32},{"ruleId":"153","severity":1,"message":"154","line":46,"column":13,"nodeType":"155","messageId":"156","endLine":46,"endColumn":30},{"ruleId":"138","severity":1,"message":"145","line":58,"column":41,"nodeType":"140","messageId":"141","endLine":58,"endColumn":43},{"ruleId":"129","severity":1,"message":"130","line":1,"column":17,"nodeType":"131","messageId":"132","endLine":1,"endColumn":26},{"ruleId":"129","severity":1,"message":"157","line":1,"column":28,"nodeType":"131","messageId":"132","endLine":1,"endColumn":36},{"ruleId":"129","severity":1,"message":"158","line":58,"column":15,"nodeType":"131","messageId":"132","endLine":58,"endColumn":23},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["161"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'basket' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["162"],"'payload' is assigned a value but never used.","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Login' is defined but never used.","'disaptch' is assigned a value but never used.","'userLoggedIn' is assigned a value but never used.","Assignments to the 'userLoggedIn' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'useState' is defined but never used.","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [dispatch]",{"range":"167","text":"168"},"Update the dependencies array to be: [basket, user]",{"range":"169","text":"170"},[1725,1727],"[dispatch]",[2134,2142],"[basket, user]"]